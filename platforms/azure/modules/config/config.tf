# Copyright 2017 The Gardener Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##############################################################################
# azure iaas configuration handling
# pack or unpack configuration variables for iaas layer
# generated by create.sh based on variables.tf
##############################################################################

#
# specify config map to unpack settings into output
#
variable "iaas_config" {
  type = "map"
  default = { }
}

#
# or specify variables according to variables.tf to
# pack a config map
#

#
# [] operator only supports homogeneous maps in terraform
# so we have to separate list from simple config values in two separate sub maps
# but [] supports nested maps (but not the lookup function)
# Therefore we cannot use a defaulted lookup, but have to be assure the entry exists.
#
locals {
  struct = {
    simple = {}
    list = {}
  }
  config = "${merge(local.struct,var.iaas_config)}"
  simple = "${local.config["simple"]}"
  list = "${local.config["list"]}"
}
module "tenant_id" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"tenant_id",var.tenant_id)}"
}
module "subscription_id" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"subscription_id",var.subscription_id)}"
}
module "client_id" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"client_id",var.client_id)}"
}
module "client_secret" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"client_secret",var.client_secret)}"
}
module "region" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"region",var.region)}"
}
module "cloudenv" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"cloudenv",var.cloudenv)}"
}

#
# always provide a config map value
#
locals {
  iaas_config = {
    simple = {
      tenant_id = "${module.tenant_id.value}"
      subscription_id = "${module.subscription_id.value}"
      client_id = "${module.client_id.value}"
      client_secret = "${module.client_secret.value}"
      region = "${module.region.value}"
      cloudenv = "${module.cloudenv.value}"
    }
    list = {

    }
  }
}

output "iaas_config" {
  value = "${local.iaas_config}"
}

output "simple" {
  value = {
      tenant_id = "${module.tenant_id.value}"
      subscription_id = "${module.subscription_id.value}"
      client_id = "${module.client_id.value}"
      client_secret = "${module.client_secret.value}"
      region = "${module.region.value}"
      cloudenv = "${module.cloudenv.value}"
  }
}
output "list" {
  value = {

  }
}

#
# always provide all settings as dedicated output
#
output "tenant_id" {
  value = "${module.tenant_id.value}"
}
output "subscription_id" {
  value = "${module.subscription_id.value}"
}
output "client_id" {
  value = "${module.client_id.value}"
}
output "client_secret" {
  value = "${module.client_secret.value}"
}
output "region" {
  value = "${module.region.value}"
}
output "cloudenv" {
  value = "${module.cloudenv.value}"
}
