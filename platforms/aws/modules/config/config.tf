# Copyright 2017 The Gardener Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##############################################################################
# aws iaas configuration handling
# pack or unpack configuration variables for iaas layer
# generated by create.sh based on variables.tf
##############################################################################

#
# specify config map to unpack settings into output
#
variable "iaas_config" {
  type = "map"
  default = { }
}

#
# or specify variables according to variables.tf to
# pack a config map
#

#
# [] operator only supports homogeneous maps in terraform
# so we have to separate list from simple config values in two separate sub maps
# but [] supports nested maps (but not the lookup function)
# Therefore we cannot use a defaulted lookup, but have to be assure the entry exists.
#
locals {
  struct = {
    simple = {}
    list = {}
  }
  config = "${merge(local.struct,var.iaas_config)}"
  simple = "${local.config["simple"]}"
  list = "${local.config["list"]}"
}
module "secret_key" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"secret_key",var.secret_key)}"
}
module "access_key" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"access_key",var.access_key)}"
}
module "region" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"region",var.region)}"
}
module "availability_zone" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"availability_zone",var.availability_zone)}"
}
module "vpc_cidr" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"vpc_cidr",var.vpc_cidr)}"
}
module "public_subnet_cidr" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"public_subnet_cidr",var.public_subnet_cidr)}"
}
module "private_subnet_cidr" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"private_subnet_cidr",var.private_subnet_cidr)}"
}
module "kube2iam_version" {
  source="../../../../modules/variable"
  value="${lookup(local.simple,"kube2iam_version",var.kube2iam_version)}"
}
module "kube2iam_roles" {
  source="../../../../modules/lookup_list"
  map = "${local.list}"
  key = "kube2iam_roles"
  default = "${var.kube2iam_roles}"
}

#
# always provide a config map value
#
locals {
  iaas_config = {
    simple = {
      secret_key = "${module.secret_key.value}"
      access_key = "${module.access_key.value}"
      region = "${module.region.value}"
      availability_zone = "${module.availability_zone.value}"
      vpc_cidr = "${module.vpc_cidr.value}"
      public_subnet_cidr = "${module.public_subnet_cidr.value}"
      private_subnet_cidr = "${module.private_subnet_cidr.value}"
      kube2iam_version = "${module.kube2iam_version.value}"
    }
    list = {
      kube2iam_roles = "${module.kube2iam_roles.value}"
    }
  }
}

output "iaas_config" {
  value = "${local.iaas_config}"
}

output "simple" {
  value = {
      secret_key = "${module.secret_key.value}"
      access_key = "${module.access_key.value}"
      region = "${module.region.value}"
      availability_zone = "${module.availability_zone.value}"
      vpc_cidr = "${module.vpc_cidr.value}"
      public_subnet_cidr = "${module.public_subnet_cidr.value}"
      private_subnet_cidr = "${module.private_subnet_cidr.value}"
      kube2iam_version = "${module.kube2iam_version.value}"
  }
}
output "list" {
  value = {
      kube2iam_roles = "${module.kube2iam_roles.value}"
  }
}

#
# always provide all settings as dedicated output
#
output "secret_key" {
  value = "${module.secret_key.value}"
}
output "access_key" {
  value = "${module.access_key.value}"
}
output "region" {
  value = "${module.region.value}"
}
output "availability_zone" {
  value = "${module.availability_zone.value}"
}
output "vpc_cidr" {
  value = "${module.vpc_cidr.value}"
}
output "public_subnet_cidr" {
  value = "${module.public_subnet_cidr.value}"
}
output "private_subnet_cidr" {
  value = "${module.private_subnet_cidr.value}"
}
output "kube2iam_version" {
  value = "${module.kube2iam_version.value}"
}
output "kube2iam_roles" {
  value = "${module.kube2iam_roles.value}"
}

#output "local_iaas_config" {
#  value = "${local.config}"
#}
#output "local_simple" {
#  value = "${local.simple}"
#}
#output "local_list" {
#  value = "${local.list}"
#}

